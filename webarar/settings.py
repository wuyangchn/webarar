"""
Django settings for webarar project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/


ALLOWED_HOSTS = [
    # '172.24.32.202',  # cug
    '103.140.228.72',  # 硅云
    '127.0.0.1',  # localhost
    # 'www.webarar.com', this domain was cancelled
    'www.webarar.net',
    '0.0.0.0:8000',
]

# ALLOWED_HOSTS¶
# Default: [] (Empty list)
#
# A list of strings representing the host/domain names that this Django site can serve. This is a security measure to
# prevent HTTP Host header attacks, which are possible even under many seemingly-safe web server configurations.
#
# Values in this list can be fully qualified names (e.g. 'www.example.com'), in which case they will be matched
# against the request’s Host header exactly (case-insensitive, not including port). A value beginning with a period
# can be used as a subdomain wildcard: '.example.com' will match example.com, www.example.com, and any other subdomain
# of example.com. A value of '*' will match anything; in this case you are responsible to provide your own validation
# of the Host header (perhaps in a middleware; if so this middleware must be listed first in MIDDLEWARE).
#
# Django also allows the fully qualified domain name (FQDN) of any entries. Some browsers include a trailing dot in
# the Host header which Django strips when performing host validation.
#
# If the Host header (or X-Forwarded-Host if USE_X_FORWARDED_HOST is enabled) does not match any value in this list,
# the django.http.HttpRequest.get_host() method will raise SuspiciousOperation.
#
# When DEBUG is True and ALLOWED_HOSTS is empty, the host is validated against ['localhost', '127.0.0.1', '[::1]'].
#
# This validation only applies via get_host(); if your code accesses the Host header directly from request.META you
# are bypassing this security protection.
#
# Changed in Django 1.10.3:
# In older versions, ALLOWED_HOSTS wasn’t checked if DEBUG=True. This was also changed in Django 1.9.11 and 1.8.16
# to prevent a DNS rebinding attack.


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'home.apps.HomeConfig',
    'calc.apps.CalcConfig',
    'detail.apps.DetailConfig',
    'doc.apps.ManualConfig',
    'references.apps.ReferencesConfig',
    'sslserver',
]

MIDDLEWARE = [
    # 处理编码和响应的中间件放在最前面
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'webarar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webarar.wsgi.application'


# redis配置, https://blog.csdn.net/jiandanokok/article/details/109426427
# https://django-redis-chs.readthedocs.io/zh_CN/latest/#
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            # "PASSWORD": "密码",
        },
        # 前缀, 前缀看个人需要，如不需要统一加前缀可以去掉
        # "KEY_PREFIX": "test"
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Hongkong'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_all')

STATIC_URL = 'static/'
STATIC_DIR = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
# 用户下载文件的服务器保存地址
DOWNLOAD_URL = 'static/download/'
DOWNLOAD_ROOT = os.path.join(STATIC_DIR, 'download')
# 用户上传文件的服务器保存地址
# 如果使用static目录所有用户可以尝试文件名下载上传的文件
# UPLOAD_URL = 'static/upload/'
# UPLOAD_ROOT = os.path.join(STATIC_DIR, 'upload')
PRIVATE_DIR = os.path.join(BASE_DIR, 'private')
UPLOAD_URL = 'private/upload/'
UPLOAD_ROOT = os.path.join(PRIVATE_DIR, 'upload')
MDD_URL = 'private/mdd/'
MDD_ROOT = os.path.join(PRIVATE_DIR, 'mdd')
# 设置文件地址
SETTINGS_URL = 'static/settings/'
SETTINGS_ROOT = os.path.join(STATIC_DIR, 'settings')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# The Cross-Origin-Opener-Policy header has been ignored, because the URL's origin was untrustworthy. It was defined either in the final response or a redirect.
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'None'

# admin csrf
CSRF_TRUSTED_ORIGINS = ['https://www.webarar.net']

# log
LOG_DIR = os.path.join(BASE_DIR, 'logs')
LOGGING = {
    'version': 1,  # 保留字
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志实例
}

# DATA_UPLOAD_MAX_MEMORY_SIZE为10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'your_database_name',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'USER': 'user',
        'PASSWORD': 'password'
    }
}


try:
    from webarar.local_settings import *
except ImportError:
    raise

"""
Django settings for webarar project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#2pgsxsbe7)8rc4ss*^%&$jlsf(=qcih9hiu_f&9d@14oz73*m'

# SECURITY WARNING: don't run with debug turned on in production!
# 关闭Debug, 使用nginx部署静态文件
DEBUG = False

ALLOWED_HOSTS = [
    '172.24.32.202',  # cug
    '127.0.0.1',  # localhost
    'www.webarar.com', 
    'www.webarar.net',
    '0.0.0.0:8000',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'home.apps.HomeConfig',
    'calc.apps.CalcConfig',
    'detail.apps.DetailConfig',
    'doc.apps.ManualConfig',
    'references.apps.ReferencesConfig',
    'sslserver',
]

MIDDLEWARE = [
    # 处理编码和响应的中间件放在最前面
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'webarar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webarar.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'webarar',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'USER': 'root',
        'PASSWORD': 'x7BtfR6Vm0AlVPRk'  # ubuntu server password
    }
}


# redis配置, https://blog.csdn.net/jiandanokok/article/details/109426427
# https://django-redis-chs.readthedocs.io/zh_CN/latest/#
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            # "PASSWORD": "密码",
        },
        # 前缀, 前缀看个人需要，如不需要统一加前缀可以去掉
        # "KEY_PREFIX": "test"
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Hongkong'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_all')

STATIC_URL = 'static/'
STATIC_DIR = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
# 用户下载文件的服务器保存地址
DOWNLOAD_URL = 'static/download/'
DOWNLOAD_ROOT = os.path.join(STATIC_DIR, 'download')
# 用户上传文件的服务器保存地址
UPLOAD_URL = 'static/upload/'
UPLOAD_ROOT = os.path.join(STATIC_DIR, 'upload')
# 设置文件地址
SETTINGS_URL = 'static/settings/'
SETTINGS_ROOT = os.path.join(STATIC_DIR, 'settings')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# The Cross-Origin-Opener-Policy header has been ignored, because the URL's origin was untrustworthy. It was defined either in the final response or a redirect.
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'None'

# admin csrf
CSRF_TRUSTED_ORIGINS=['https://www.webarar.net']

# log
LOG_DIR = os.path.join(BASE_DIR, 'logs')
LOGGING = {
    'version': 1,  # 保留字
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志实例
    'formatters': {  # 定义日志的格式
        'standard': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s][%(message)s]'
        },
        'simple': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
        'collect': {
            'format': '[%(asctime)s]%(message)s'
        }
    },
    'filters': {  # 定义日志的过滤器
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理程序
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'SF': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，根据文件大小自动切
            'filename': os.path.join(LOG_DIR, "info.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 500,  # 日志大小 50M（最好不要超过1G）
            'backupCount': 3,  # 备份数为3 xx.log --> xx.log.1 --> xx.log.2 --> xx.log.3
            'formatter': 'standard',
            'encoding': 'utf-8',  # 文件记录的编码格式
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(LOG_DIR, "err.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 5,  # 日志大小 5M
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'collect': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(LOG_DIR, "main.log"),
            'backupCount': 3,  # 备份数为3 xx.log --> xx.log.2018-08-23_00-00-00 --> xx.log.2018-08-24_00-00-00 --> ...
            'when': 'D',  # 每天一切， 可选值有S/秒 M/分 H/小时 D/天 W0-W6/周(0=周一) midnight/如果没指定时间就默认在午夜
            'formatter': 'collect',
            'encoding': "utf-8"
        }
    },
    # 'loggers': {  # 日志实例
    #     '': {  # 默认的logger应用如下配置
    #         'handlers': ['SF', 'console', 'error'],  # 上线之后可以把'console'移除
    #         'level': 'DEBUG',
    #         'propagate': True,  # 是否向上一级logger实例传递日志信息
    #     },
    #     'collect': {  # 名为 'collect' 的logger还单独处理
    #         # 'handlers': ['console', 'collect'],
    #         'handlers': [],
    #         'level': 'INFO',
    #     }
    # },
}

# DATA_UPLOAD_MAX_MEMORY_SIZE为10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760

try:
    from .local_settings import *
except ImportError:
    pass
